"""init database

Revision ID: 2fbba4340d61
Revises: 
Create Date: 2024-07-24 20:40:58.935437

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '2fbba4340d61'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('comment',
    sa.Column('protein_id', sa.BigInteger(), nullable=False),
    sa.Column('Literature', sa.Text(), nullable=True),
    sa.Column('DOI', sa.Text(), nullable=True),
    sa.Column('Year', sa.SmallInteger(), nullable=True),
    sa.Column('PMID', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['protein_id'], ['basic_information.protein_id'], ),
    sa.PrimaryKeyConstraint('protein_id')
    )
    with op.batch_alter_table('comment', schema=None) as batch_op:
        batch_op.create_index('comment_basic_cols_gin', ['PMID'], unique=False, postgresql_using='gin')
        batch_op.create_index('comment_year_btree', ['Year'], unique=False)

    op.create_table('kinetic_parameters',
    sa.Column('protein_id', sa.BigInteger(), nullable=False),
    sa.Column('Activity', sa.DECIMAL(precision=11, scale=5), nullable=True),
    sa.Column('KM', sa.DECIMAL(precision=11, scale=5), nullable=True),
    sa.Column('Kcat', sa.DECIMAL(precision=11, scale=5), nullable=True),
    sa.Column('KMPerKcat', sa.DECIMAL(precision=11, scale=5), nullable=True),
    sa.Column('TN', sa.DECIMAL(precision=11, scale=5), nullable=True),
    sa.Column('EValue', sa.DECIMAL(precision=11, scale=5), nullable=True),
    sa.Column('DeltaDeltaG', sa.DECIMAL(precision=11, scale=5), nullable=True),
    sa.Column('Temperature', sa.SmallInteger(), nullable=True),
    sa.Column('pH', sa.DECIMAL(precision=7, scale=5), nullable=True),
    sa.ForeignKeyConstraint(['protein_id'], ['basic_information.protein_id'], ),
    sa.PrimaryKeyConstraint('protein_id')
    )
    with op.batch_alter_table('kinetic_parameters', schema=None) as batch_op:
        batch_op.create_index('kinetic_parameters_activity_btree', ['Activity'], unique=False)
        batch_op.create_index('kinetic_parameters_deltadeltag_btree', ['DeltaDeltaG'], unique=False)
        batch_op.create_index('kinetic_parameters_evalue_btree', ['EValue'], unique=False)
        batch_op.create_index('kinetic_parameters_kcat_btree', ['Kcat'], unique=False)
        batch_op.create_index('kinetic_parameters_km_btree', ['KM'], unique=False)
        batch_op.create_index('kinetic_parameters_kmperkcat_btree', ['KMPerKcat'], unique=False)
        batch_op.create_index('kinetic_parameters_ph_btree', ['pH'], unique=False)
        batch_op.create_index('kinetic_parameters_temperature_btree', ['Temperature'], unique=False)
        batch_op.create_index('kinetic_parameters_tn_btree', ['TN'], unique=False)

    op.create_table('reaction_calculation',
    sa.Column('protein_id', sa.BigInteger(), nullable=False),
    sa.Column('ActiveResidue', sa.Text(), nullable=True),
    sa.Column('ReactionSmile', sa.Text(), nullable=True),
    sa.Column('KEGG', sa.Text(), nullable=True),
    sa.Column('ReactionEnergy', sa.DECIMAL(precision=11, scale=5), nullable=True),
    sa.Column('ReactionParameters', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['protein_id'], ['basic_information.protein_id'], ),
    sa.PrimaryKeyConstraint('protein_id')
    )
    op.create_table('structure_information',
    sa.Column('protein_id', sa.BigInteger(), nullable=False),
    sa.Column('RSA', sa.DECIMAL(precision=11, scale=5), nullable=True),
    sa.Column('PHI', sa.DECIMAL(precision=11, scale=5), nullable=True),
    sa.Column('PSI', sa.DECIMAL(precision=11, scale=5), nullable=True),
    sa.Column('ResidueDepth', sa.DECIMAL(precision=11, scale=5), nullable=True),
    sa.Column('CADepth', sa.DECIMAL(precision=11, scale=5), nullable=True),
    sa.Column('RelativeBfactor', sa.DECIMAL(precision=11, scale=5), nullable=True),
    sa.ForeignKeyConstraint(['protein_id'], ['basic_information.protein_id'], ),
    sa.PrimaryKeyConstraint('protein_id')
    )
    op.create_table('substrate',
    sa.Column('protein_id', sa.BigInteger(), nullable=False),
    sa.Column('Substrate', sa.Text(), nullable=True),
    sa.Column('Smiles', sa.Text(), nullable=True),
    sa.Column('MolecularFormula', sa.Text(), nullable=True),
    sa.Column('Cofator', sa.Text(), nullable=True),
    sa.Column('ProductFormula', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['protein_id'], ['basic_information.protein_id'], ),
    sa.PrimaryKeyConstraint('protein_id')
    )
    with op.batch_alter_table('substrate', schema=None) as batch_op:
        batch_op.create_index('substrate_basic_cols_gin', ['Substrate'], unique=False, postgresql_using='gin', postgresql_ops={'Substrate': 'gin_bigm_ops'})

    with op.batch_alter_table('basic_information', schema=None) as batch_op:
        batch_op.add_column(sa.Column('ECNumber', sa.Text(), nullable=False))
        batch_op.add_column(sa.Column('ProteinName', sa.Text(), nullable=False))
        batch_op.add_column(sa.Column('Organism', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('UniprotID', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('Sequence', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('SequenceLength', sa.SmallInteger(), nullable=True))
        batch_op.add_column(sa.Column('PDBID_WT', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('PDBID_MUT', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('AlphaFoldDB', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('Mutation', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('MutatedChain', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('MutationCount', sa.SmallInteger(), nullable=True))
        batch_op.alter_column('protein_id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=False,
               autoincrement=True)
        batch_op.drop_index('basic_information_basic_cols_gin', postgresql_using='gin')
        batch_op.create_index('basic_information_basic_cols_gin', ['ECNumber', 'ProteinName', 'UniprotID', 'PDBID_WT', 'PDBID_MUT', 'Mutation'], unique=False, postgresql_using='gin', postgresql_ops={'ECNumber': 'gin_bigm_ops', 'ProteinName': 'gin_bigm_ops', 'UniprotID': 'gin_bigm_ops', 'PDBID_WT': 'gin_bigm_ops', 'PDBID_MUT': 'gin_bigm_ops', 'Mutation': 'gin_bigm_ops'})
        batch_op.create_index('basic_information_sequence_length_btree', ['SequenceLength'], unique=False)
        batch_op.drop_column('mutation')
        batch_op.drop_column('pdbid_wt')
        batch_op.drop_column('sequence')
        batch_op.drop_column('ecnumber')
        batch_op.drop_column('organism')
        batch_op.drop_column('mutationcount')
        batch_op.drop_column('mutatedchain')
        batch_op.drop_column('sequencelength')
        batch_op.drop_column('alphafolddb')
        batch_op.drop_column('uniprotid')
        batch_op.drop_column('proteinname')
        batch_op.drop_column('pdbid_mut')

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_constraint('user_email_key', type_='unique')
        batch_op.drop_constraint('user_username_key', type_='unique')
        batch_op.create_index(batch_op.f('ix_user_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_user_username'), ['username'], unique=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_username'))
        batch_op.drop_index(batch_op.f('ix_user_email'))
        batch_op.create_unique_constraint('user_username_key', ['username'])
        batch_op.create_unique_constraint('user_email_key', ['email'])

    with op.batch_alter_table('basic_information', schema=None) as batch_op:
        batch_op.add_column(sa.Column('pdbid_mut', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('proteinname', sa.TEXT(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('uniprotid', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('alphafolddb', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('sequencelength', sa.SMALLINT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('mutatedchain', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('mutationcount', sa.SMALLINT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('organism', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('ecnumber', sa.TEXT(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('sequence', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('pdbid_wt', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('mutation', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.drop_index('basic_information_sequence_length_btree')
        batch_op.drop_index('basic_information_basic_cols_gin', postgresql_using='gin', postgresql_ops={'ECNumber': 'gin_bigm_ops', 'ProteinName': 'gin_bigm_ops', 'UniprotID': 'gin_bigm_ops', 'PDBID_WT': 'gin_bigm_ops', 'PDBID_MUT': 'gin_bigm_ops', 'Mutation': 'gin_bigm_ops'})
        batch_op.create_index('basic_information_basic_cols_gin', ['ecnumber', 'proteinname', 'uniprotid', 'organism', 'pdbid_wt', 'pdbid_mut', 'mutation', 'mutationcount'], unique=False, postgresql_using='gin')
        batch_op.alter_column('protein_id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=True)
        batch_op.drop_column('MutationCount')
        batch_op.drop_column('MutatedChain')
        batch_op.drop_column('Mutation')
        batch_op.drop_column('AlphaFoldDB')
        batch_op.drop_column('PDBID_MUT')
        batch_op.drop_column('PDBID_WT')
        batch_op.drop_column('SequenceLength')
        batch_op.drop_column('Sequence')
        batch_op.drop_column('UniprotID')
        batch_op.drop_column('Organism')
        batch_op.drop_column('ProteinName')
        batch_op.drop_column('ECNumber')

    with op.batch_alter_table('substrate', schema=None) as batch_op:
        batch_op.drop_index('substrate_basic_cols_gin', postgresql_using='gin', postgresql_ops={'Substrate': 'gin_bigm_ops'})

    op.drop_table('substrate')
    op.drop_table('structure_information')
    op.drop_table('reaction_calculation')
    with op.batch_alter_table('kinetic_parameters', schema=None) as batch_op:
        batch_op.drop_index('kinetic_parameters_tn_btree')
        batch_op.drop_index('kinetic_parameters_temperature_btree')
        batch_op.drop_index('kinetic_parameters_ph_btree')
        batch_op.drop_index('kinetic_parameters_kmperkcat_btree')
        batch_op.drop_index('kinetic_parameters_km_btree')
        batch_op.drop_index('kinetic_parameters_kcat_btree')
        batch_op.drop_index('kinetic_parameters_evalue_btree')
        batch_op.drop_index('kinetic_parameters_deltadeltag_btree')
        batch_op.drop_index('kinetic_parameters_activity_btree')

    op.drop_table('kinetic_parameters')
    with op.batch_alter_table('comment', schema=None) as batch_op:
        batch_op.drop_index('comment_year_btree')
        batch_op.drop_index('comment_basic_cols_gin', postgresql_using='gin')

    op.drop_table('comment')
    # ### end Alembic commands ###
